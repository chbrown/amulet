tests:
  - description: boolean
    context: |
      { name: "Jim", age: 24, admin: true }
    template: |
      {{#name}}{{.}}{{/name}}
      {{#age}}{{age}}{{/age}}
      {{#admin}}admin{{/admin}}
    output: |
      Jim
      24
      admin
  - description: comments
    context: |
      { title: function() { return "A Comedy of Errors"; } }
    template: |
      <h1>{{title}}{{! just something interesting... or not... }}</h1>
    output: |
      <h1>A Comedy of Errors</h1>
  - description: complex
    context: |
      {
        header: function() {
          return "Colors";
        },
        links: [
          {name: "red",   current: true,  url: "#Red"},
          {name: "green", current: false, url: "#Green"},
          {name: "blue",  current: false, url: "#Blue"}
        ]
      }
    template: |
      <h1>{{header}}</h1>
      <ul>
        {{#links}}
          {{#current}}
            <li><strong>{{name}}</strong></li>
          {{/}}
          {{^current}}
            <li><a href="{{url}}">{{name}}</a></li>
          {{/}}
        {{/}}
      </ul>
      {{^links}}
        <p>The list is empty.</p>
      {{/}}
    output: |
      <h1>Colors</h1>
        <ul>
              <li><strong>red</strong></li>
              <li><a href="#Green">green</a></li>
              <li><a href="#Blue">blue</a></li>
        </ul>
  - description: delimiters
    context: |
      {
        first: "It worked the first time.",
        second: "And it worked the second time.",
        third: "Then, surprisingly, it worked the third time.",
        fourth: "Fourth time also fine!"
      }
    template: |
      {{=<% %>=}}* <% first %>
      * <% second %>
      <%=| |=%>
      * | third |
      |={{ }}=|
      * {{ fourth }}
    output: |
      * It worked the first time.
      * And it worked the second time.

      * Then, surprisingly, it worked the third time.

      * Fourth time also fine!
  - description: error_not_found
    context: |
      {bar: 2}
    template: |
      {{foo}}
    output: |


  - description: inverted
    context: |
      {
        admin: false
      }
    template: |
      {{#admin}}Admin.{{/admin}}
      {{^admin}}Not Admin.{{/admin}}
    output: |

      Not Admin.
  - description: two_in_a_row
    context: |
      { name: "Joe", greeting: "Welcome" }
    template: |
      {{greeting}}, {{name}}!
    output: |
      Welcome, Joe!
  - description: recursion_with_same_names
    context: |
      {
        name: 'name',
        index: 1,
        description: 'The name game',
        terms: [
          {name: 't1', index: 23},
          {name: 't2', index: 24},
        ]
      }
    template: |
      {{name}}:{{index}}
      {{description}}
      {{#terms}}
        {{name}}:{{index}}
        {{description}}
      {{/terms}}
    output: |
      name:1
      The name game

        t1:23
        The name game
        t2:24
        The name game
  - description: escaped
    context: |
      { title: function() { return "Bear > Shark"; } }
    template: |
      <h1>{{title}}</h1>
    output: |
      <h1>Bear &gt; Shark</h1>
  - description: unescaped
    context: |
      { title: function() { return "Bear > Shark"; } }
    template: |
      <h1>{{{title}}}</h1>
    output: |
      <h1>Bear > Shark</h1>
  - description: simple
    context: |
      {
        name: "Chris",
        value: 10000,
        taxed_value: function () {
          return 10000 - (10000 * 0.4);
        },
        in_ca: true
      }
    template: |
      Hello {{name}}
      You have just won ${{value}}!
      {{#in_ca}}
      Well, ${{ taxed_value }}, after taxes.
      {{/in_ca}}
    output: |
      Hello Chris
      You have just won $10000!

      Well, $6000, after taxes.
  - description: reuse_of_enumerables
    context: |
      { terms: [ {name: 't1', index: 0}, {name: 't2', index: 1} ] }
    template: |
      {{#terms}}
        {{name}} + {{index}}
      {{/terms}}
      {{#terms}}
        {{name}} / {{index}}
      {{/terms}}
    output: |

        t1 + 0
        t2 + 1
        t1 / 0
        t2 / 1
  - description: hash_instead_of_array
    context: |
      { person: { name: "Chris" } }
    template: |
      {{#person}}
        Name: {{name}}
      {{/person}}
    output: |

        Name: Chris
extended_tests:
  - description: Very basic function calls
    context: |
      { status: 'paid', amount: '$314.15' }
    template: |
      {{#status.equals('owed')}}
        <span color="red">You owe {{amount}}</span>
      {{/}}
      {{#status.equals('paid')}}
        <span color="green">Thanks for paying {{amount}}!</span>
      {{/}}
    output: |
      <span color="green">Thanks for paying $314.15!</span>
  - description: String built-ins with multiple arguments
    context: |
      { phrase: 'Spitting game' }
    template: |
      {{phrase.substring(2)}}
      ;;
      {{phrase.slice(9, -2)}}
      ;;
      {{#phrase}}
        {{_.substr(-6)}}
      {{/phrase}}
    output: |
      itting game
      ;;
      ga
      ;;
      g game
  - description: Scalar sections
    context: |
      { animals: [
          {type: 'dog', color: 'Black', sound: 'Bark!'},
          {type: 'cat', color: 'White' }
        ],
        keeper: {name: 'Bob', nonspecializiation: 'dogs'}
      }
    template: |
      {{#animals}}
        Type: {{type}}
        -->
        {{#sound}}
          Sound: {{_}}
        {{/}}
        {{^sound}}
          [Silent]
        {{/}}
      {{/}}
      Keeper; {{keeper.name}}
      {{#keeper.specializiation}}
        Specialization: {{_}}
      {{/}}
    output: |
      Type: dog
      -->
        Sound: Bark!
      Type: cat
      -->
        [Silent]
      Keeper; Bob
  - description: Dynamic function arguments
    context: |
      { number: 3.141592654, precision: 2 }
    template: |
      {{number.toFixed(precision)}}
      ;;
      {{number.toFixed(5)}}
    output: |
      3.14
      ;;
      3.14159
